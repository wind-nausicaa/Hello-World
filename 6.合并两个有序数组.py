# 给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。

# 请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。

# 注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。

 

# 示例 1：

# 输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
# 输出：[1,2,2,3,5,6]
# 解释：需要合并 [1,2,3] 和 [2,5,6] 。
# 合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。
# 示例 2：

# 输入：nums1 = [1], m = 1, nums2 = [], n = 0
# 输出：[1]
# 解释：需要合并 [1] 和 [] 。
# 合并结果是 [1] 。
# 示例 3：

# 输入：nums1 = [0], m = 0, nums2 = [1], n = 1
# 输出：[1]
# 解释：需要合并的数组是 [] 和 [1] 。
# 合并结果是 [1] 。
# 注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。
 

# 提示：

# nums1.length == m + n
# nums2.length == n
# 0 <= m, n <= 200
# 1 <= m + n <= 200
# -109 <= nums1[i], nums2[j] <= 109
 

# 进阶：你可以设计实现一个时间复杂度为 O(m + n) 的算法解决此问题吗？

class Solution:
    def merge(self, nums1: list[int], m: int, nums2: list[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        "两个数组已经是从小到大排列，只要将数组2的每一个值从右向左和数组1中的数组比较，谁大谁放后面，谁小谁放前面"
        "p1:指针1，指示原数组1中未排序的末尾位置"
        "p2:指针2，指示数组2中未排序的末尾位置"
        "tail:指针3，指示新数组中未排序的末尾位置"
        "初始化各个值，数组总长度为m和n的总和"
        p1 = m - 1
        p2 = n - 1
        tail = m + n - 1
        "循环判断的次数为数组的总长度，从末尾位置开始循环"
        "最后一个位置应该填上哪个数组的值？答案是判断两个数组的末尾数字，哪个大就填哪个，然后填过的不参与对比"
        for i in range(tail, -1, -1):
            # 如果nums1的数字比较大，或者p2数组空了
            if p2 < 0 or nums1[p1] > nums2[p2] :
                # 则填写nums1的数字放在末尾
                nums1[i] = nums1[p1]
                # 填过的数字排除在外，相当于清空nums1末尾的数字
                p1 -= 1
            # 如果nums2的数字比较大，或者p1数组空了
            else:
                # 则填写nums2的数字放在末尾
                nums1[i] = nums2[p2]
                # 填写过的数字排除在外
                p2 -= 1
    # 填写完后，末尾数字往前挪1位，即tail - 1，通过for循环来实现，直到填完整个数组


