# 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。

# 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

 

# 说明：

# 为什么返回数值是整数，但输出的答案是数组呢？

# 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

# 你可以想象内部操作如下:

# // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
# int len = removeDuplicates(nums);

# // 在函数里修改输入数组对于调用者是可见的。
# // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
# for (int i = 0; i < len; i++) {
#     print(nums[i]);
# }
 

# 示例 1：

# 输入：nums = [1,1,1,2,2,3]
# 输出：5, nums = [1,1,2,2,3]
# 解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。
# 示例 2：

# 输入：nums = [0,0,1,1,1,1,2,3,3]
# 输出：7, nums = [0,0,1,1,2,3,3]
# 解释：函数应返回新长度 length = 7, 并且原数组的前七个元素被修改为 0, 0, 1, 1, 2, 3, 3。不需要考虑数组中超出新长度后面的元素。
 

# 提示：

# 1 <= nums.length <= 3 * 104
# -104 <= nums[i] <= 104
# nums 已按升序排列

class Solution:
    def removeDuplicates(self, nums: list[int]) -> int:
        # 解题思路
        # 同上一个问题一样，这里只要改变一个判断规则即可，只有一个数字重复3次及以上那么就执行删除操作，还可以单独设置一个计数器，计数器>2则进行删除，但是这里不允许使用额外空间，那么只允许1个变量，在原数组上进行操作
        # 这里的p指符合要求的数组的个数，默认为2
        p = 2
        # 数组长度一旦超过3个时，则进行遍历，遍历到倒数第三个数字为止
        for i in range(len(nums) - 2):
            # 如果第三个数字和前两个中的任意1个不同（反之则为第三个数字和前两个数字都相同），则这个数字可以保留，这里需要注意，赋值过去的时候如果按照i为指针，那么数据会因为赋值而被污染，故作比较的时候，应该一直是和验证过的数组进行对比，验证过的数组指针为p，而不是i，i是旧数组，p是新数组，在两个数进行对比时会出现这个问题；
            if nums[i + 2] != nums[p - 2]:
                # 数字保留，写入第p个位置
                nums[p] = nums[i + 2]
                # 指针p指向下一个数字
                p += 1
        # 遍历完后，返回p
        return min(p, len(nums))


